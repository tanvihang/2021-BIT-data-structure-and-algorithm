/*
采用"头尾法存储广义表，实现以下广义表的操作：
    1．Status CreateGList( GList &L, char *S ) // 根据字符串 S 表示的广义表内容建立广义表数据结构；
    2．GList GetHead( GList L)  // 取表头运算
    3．GList GetTail( GList L)  // 取表尾运算
    4．void DestroyGList( GList &L)  // 销毁广义表 L
    5．void PrintGList( GList L) // 显示广义表 L 内容

程序运行时，首先输入一个广义表，表中的原子是小写字母。随后可以交替输入取表头或取表尾指令（分别用 1 和 2 表示），取的结果替代当前广义表，并释放相应的资源（需将释放资源信息输出）。当广义表是空或是原子时，程序停止运行。

例：（下面的黑体为输入）

((a,()),c,d)

generic list: ((a,()),c,d)

1
destroy tail
free list node
generic list: (a,())

2
free head node
free list node
generic list: (())

1
destroy tail
free list node
generic list: ()
*/


#include "stdio.h"
#include "string.h"

char Str[201];
int Point_1=0,Point_2;


//output the head
void GetHead()
{
	printf("destroy tail\nfree list node\ngeneric list: ");
	int depth =-1;
	for(int i=Point_1;Str[i]!='\0';i++)
	{
		if(Str[i]=='(')
		{
			depth++;
			if(depth == 0)
				Point_1 =i+1;
			continue;
		}
		if(Str[i]==')')
		{
			depth--;
			if(depth == 0)
			{
				Point_2=i;
				break;
			}
			continue;
		}
		if(Str[i]==','&&depth==0)
		{
			Point_2=i-1;
			break;
		}
	}
	for(int i=Point_1;i<=Point_2;i++)
		printf("%c",Str[i]);
	printf("\n");
}

void GetTail()
{
	printf("free head node\nfree list node\ngeneric list: ");
	int depth =-1;
	int flag=0;
	for(int i=Point_1;Str[i]!='\0';i++)
	{
		if(i==Point_2)
		{
			flag=1;
			break;
		}
		if(Str[i]=='(')
			depth++;
		if(Str[i]==')')
			depth--;
		if(Str[i]==','&&depth==0)
		{
			Str[i]='(';
			Point_1=i;
			break;
		}
	}
	if(flag==1)
	{
		printf("()\n");
		return;
	}
	for (int i=Point_1;i<=Point_2;i++)
		printf("%c",Str[i]);
	printf("\n");
}

int main()
{
	scanf("%s",&Str);
	printf("generic list: %s\n",Str);
	
	Point_2 = strlen(Str)-1;
	int op;
	while(~scanf("%d",&op))
	{
		if(op==1)
			GetHead();
		else
			GetTail();
	}
	return 0;
}
