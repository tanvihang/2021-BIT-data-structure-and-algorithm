/*
1.求解规定序列能否由入栈出栈操作得到

输入：有若干组数据输入
每组数据中，第一行为两个个整数 n 和 m。n 表示需要依次从 1~n 入栈，m 表示这组数据有 m 个出栈序列需要判断，当 n=0 且 m=0 时停止。
接下来有行，每行表示一个出栈序列

输出：对每一个出栈序列,如果能正常出栈,输出Yes，否则输出 No。

sample：

input:
5 2
1 2 3 4 5
5 4 1 2 3
6 1
6 5 4 3 2 1
0 0

output:
Yes
No

Yes
*/


#include "stdio.h"
#include "stdlib.h"
#define STACK_MAX 1006

int a[1005]={0}, b[1006]={0};

typedef struct stack{
	int value[STACK_MAX];
	int size;
}stack;

int stack_top(stack *s)
{
	if(s->size==0)
	{
		fprintf(stderr,"Error: stack empty\n");
		return -1;
	}
	return s->value[s->size-1];
}

void stack_push(stack *s, int d)
{
	if(s->size<STACK_MAX)
		s->value[s->size++]=d;
	else
		fprintf(stderr,"Error:stack full\n");	
}

void stack_pop(stack *s)
{
	if(s->size==0)
		fprintf(stderr,"Error: stack empty\n");
	else
		s->size--;
}

int stack_empty(stack *s)
{
	if(s->size==0)
		return 1;
	else
		return 0;
}

int main()
{
	int n=0,m=0;
	int flag=0;
	while(~scanf("%d%d",&n,&m)&&n+m)
	{
		if(flag)
			printf("\n");
		for(int i=1;i<=n;i++)
		{
			a[i]=i;
		}
		while(m--)
		{
			for(int j=1;j<=n;j++)
			{
				scanf("%d",&b[j]);
			}
			
			stack *s=(stack*)malloc(sizeof(stack));
			
			int x=1;
			int y=1;
			while(y<=n)
			{
				if(a[x]==b[y])
				{
					x++;
					y++;
				}
				else if(!stack_empty(s)&&stack_top(s)==b[y])
				{
					y++;
					stack_pop(s);
				}
				else if(x<=n)
				{
					stack_push(s,a[x]);
					x++;
				}
				else
					break;
			}
			if(stack_empty(s))
				printf("Yes\n");
			else
				printf("No\n");
		}
		flag=1;
	}
	return 0;
}

